package com.brigitte_projet;

import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

@RestController
@RequestMapping("/api/products")
public class ProductController {

    private final ProductRepository repo;

    public ProductController(ProductRepository repo) {
        this.repo = repo;
    }

    @GetMapping
    public List<Product> getAll() {
        return repo.findAll();
    }

    @PostMapping
    public Product createProduct(@RequestBody Product product) {
        return repo.save(product);
    }

    @PutMapping("/{id}")
    public Product update(@PathVariable Long id, @RequestBody Product updated) {
        Product product = repo.findById(id).orElseThrow();
        product.setName(updated.getName());
        product.setQuantity(updated.getQuantity());
        product.setMinQuantity(updated.getMinQuantity());
        product.setPrice(updated.getPrice());
        return repo.save(product);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        repo.deleteById(id);
    }
    @GetMapping("/low-stock")
    public List<Product> getLowStockProducts() {
    return repo.findByQuantityLessThan(10);
    } // ou utiliser une logique plus dynamique

    @GetMapping("/export/csv")
public void exportCSV(HttpServletResponse response) throws IOException {
    response.setContentType("text/csv");
    response.setHeader("Content-Disposition", "attachment; filename=products.csv");

    PrintWriter writer = response.getWriter();
    // writer.println("ID,Nom,Prix");
    // writer.println("1,Produit A,1000");
    // writer.println("2,Produit B,2000");
    writer.flush();
    writer.close();
}
} et package com.brigitte_projet;

import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

public interface ProductRepository extends JpaRepository<Product, Long> {

    // ⚡️ Trouver tous les produits dont quantity < minQuantity
    @Query("SELECT p FROM Product p WHERE p.quantity < p.minQuantity")
    List<Product> findByQuantityLessThanMinQuantity();

    List<Product> findByQuantityLessThan(int i);
}
et package com.brigitte_projet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/transactions")
@CrossOrigin
public class TransactionController {

    @Autowired
    private TransactionService service;

    @GetMapping
    public List<Transaction> getAll() {
        return service.getAll();
    }

    @GetMapping("/{id}")
    public Transaction getById(@PathVariable Long id) {
        return service.getById(id);
    }

    @PostMapping
    public Transaction create(@RequestBody Transaction transaction) {
        return service.save(transaction);
    }
}
et package com.brigitte_projet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/transactions")
@CrossOrigin
public class TransactionController {

    @Autowired
    private TransactionService service;

    @GetMapping
    public List<Transaction> getAll() {
        return service.getAll();
    }

    @GetMapping("/{id}")
    public Transaction getById(@PathVariable Long id) {
        return service.getById(id);
    }

    @PostMapping
    public Transaction create(@RequestBody Transaction transaction) {
        return service.save(transaction);
    }
}
package com.brigitte_projet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/reports")
@CrossOrigin(origins = "*")
public class ReportController {

    private static final Logger logger = LoggerFactory.getLogger(ReportController.class);

    @Autowired
    private ProductRepository productRepo;

    @Autowired
    private TransactionRepository transactionRepo;

    // Route de base
    @GetMapping
    public String reportHome() {
        logger.info("GET /api/reports appelé");
        return "Bienvenue dans l'API des rapports.\n" +
                "- /low-stock : produits à stock faible\n" +
                "- /sales?from=YYYY-MM-DDTHH:mm:ss&to=YYYY-MM-DDTHH:mm:ss : ventes entre deux dates";
    }

    // Liste des produits à stock faible
    @GetMapping("/low-stock")
    public List<Product> getLowStockProducts() {
        logger.info("GET /api/reports/low-stock appelé");
        return productRepo.findAll().stream()
                .filter(p -> p.getQuantity() < p.getMinQuantity())
                .collect(Collectors.toList());
    }

    // Liste des ventes "OUT" entre deux dates
    @GetMapping("/sales")
    public List<Transaction> getSalesBetween(
            @RequestParam String from,
            @RequestParam String to) {

        logger.info("GET /api/reports/sales avec from={} et to={}", from, to);

        try {
            // Parsing avec un format plus robuste si tu veux personnaliser
            DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
            LocalDateTime fromDate = LocalDateTime.parse(from, formatter);
            LocalDateTime toDate = LocalDateTime.parse(to, formatter);

            return transactionRepo.findAll().stream()
                    .filter(t -> "OUT".equalsIgnoreCase(t.getType()))
                    .filter(t -> !t.getDate().isBefore(fromDate) && !t.getDate().isAfter(toDate))
                    .collect(Collectors.toList());

        } catch (Exception e) {
            logger.error("Erreur parsing date: {}", e.getMessage());
            throw new RuntimeException("Format invalide. Utilisez : YYYY-MM-DDTHH:mm:ss");
        }
    }
}
et package com.brigitte_projet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping("/api/export")
public class ExportController {

    @Autowired
    private ProductRepository productRepository;

    @GetMapping("/products")
    public void exportProductsToCSV(HttpServletResponse response) throws IOException {
        String date = LocalDate.now().toString(); // format: yyyy-MM-dd
        String filename = "products_" + date + ".csv";

        response.setContentType("text/csv");
        response.setHeader("Content-Disposition", "attachment; filename=\"" + filename + "\"");

        List<Product> products = productRepository.findAll();

        PrintWriter writer = response.getWriter();
        writer.println("ID,Nom,Quantité,Prix");

        for (Product p : products) {
            writer.println(p.getId() + "," + p.getName() + "," + p.getQuantity() + "," + p.getPrice());
        }

        writer.flush();
        writer.close();
    }
}


        






